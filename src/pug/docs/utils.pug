extends ../_docs-template

block vars
  - var title = 'Utils | Framework7 Documentation';

block docs-index

block content

  .docs-nav
    include ../_docs-menu
  .docs-content

    h1 Utils

    p Framework7 utils is a set of helper methods that used internally and can be handy during development as well.
    p It is available as a `utils` property of Framework7 class (`Framework7.utils`) and same property on initialized app instance (`app.utils`):
    :code(lang="js")
      // If we need it in place where we don't have access to app instance or before we init the app
      var now = Framework7.utils.now();


      // After we init the app we can access it as app instance property
      var app = new Framework7({ /*...*/ });
      var now = app.utils.now();
    p It can also be imported using ES modules:
    ```js
      import { utils } from 'framework7';
    ```

    h2 Utils Methods

    h3 `parseUrlQuery()`
    .method-wrap
      p
        span.method app.utils.parseUrlQuery(<span>url</span>)
        span - parse url query get parameters
      ul.method-parameters
        li
          span.parameter url
          |  - <span class="parameter-type">string</span> - url with GET parameters. Required.
      p.method-returns Method returns object with query parameters
    :code(lang="js")
          var query = app.utils.parseUrlQuery('http://google.com/?id=5&foo=bar');
          console.log(query); // { id: 5, foo: 'bar' }

    h3 `serializeObject()`
    .method-wrap
      p
        span.method app.utils.serializeObject(<span>object</span>)
        span - Create a serialized representation of a plain object suitable for use in a URL query string
      ul.method-parameters
        li
          span.parameter object
          |  - <span class="parameter-type">object</span> - Object to serialize
      p.method-returns returns a new unique array
    :code(lang="js")
          var params = { foo: 'bar', id: 5 };
          console.log(app.utils.serializeObject(params)); // 'foo=bar&id=5'

    h3 `requestAnimationFrame()`
    .method-wrap
      p
        span.method app.utils.requestAnimationFrame(<span>callback</span>)
        span - Cross-browser implementation on requestAnimationFrame
      ul.method-parameters
        li
          span.parameter callback
          |  - <span class="parameter-type">function</span> - function to call when it's time to update your animation for the next repaint
      p.method-returns returns animation request id, that uniquely identifies the entry in the callback list
    :code(lang="js")
          var animId;
          function anim() {
            var left = parseInt($$('#anim').css('left'), 10) + 1;
            $$('#anim').css({left: left + 'px'})
            animId = app.utils.requestAnimationFrame(anim);
          }
          animId = app.utils.requestAnimationFrame(anim);

    h3 `cancelAnimationFrame()`
    .method-wrap
      p
        span.method app.utils.cancelAnimationFrame(<span>requestID</span>)
        span - Cancels an animation frame request
      ul.method-parameters
        li
          span.parameter requestID
          |  - <span class="parameter-type">number</span> - The ID value returned by the call to app.utils.requestAnimationFrame() that requested the callback
    :code(lang="js")
          app.utils.cancelAnimationFrame(animId);

    h3 `nextFrame()`
    .method-wrap
      p
        span.method app.utils.nextFrame(<span>callback</span>)
        span - Executes code on next available animation frame.
      ul.method-parameters
        li
          span.parameter callback
          |  - <span class="parameter-type">string</span> - function to call when it's time to update your animation for the next repaint.

    :code(lang="js")
          app.utils.nextFrame(function() {
            // do something on next frame
          });

    h3 `nextTick()`
    .method-wrap
      p
        span.method app.utils.nextTick(<span>callback</span>, <span>delay</span>)
        span - executes code after required delay. Basically alias for `setTimeout`
      ul.method-parameters
        li
          span.parameter callback
          |  - <span class="parameter-type">string</span> - function to call after specified delay
        li
          span.parameter delay
          |  - <span class="parameter-type">number</span> - delay in ms. <em>Optional, by deault is `0`</em>
      p.method-returns returns timeout ID
    :code(lang="js")
          app.utils.nextTick(function() {
            // do something on next tick
          });

    h3 `now()`
    .method-wrap
      p
        span.method app.utils.now()
        span - returns current timestamp in ms
    :code(lang="js")
          var now = app.utils.now();
          setTimeout(function () {
            var timeDiff = app.utils.now() - now;
            console.log(timeDiff + 'ms past');
          }, 2000);
    h3 `extend()`
    .method-wrap
      p
        span.method app.utils.extend(<span>target</span>, <span>...from</span>)
        span - extends `target` object with properties and methods from `from` objects
      ul.method-parameters
        li
          span.parameter target
          |  - <span class="parameter-type">object</span> - target object to extend
        li
          span.parameter from
          |  - <span class="parameter-type">object</span> - objects to copy properties and methods from
      p.method-returns returns target object with extended properties and methods
    p This method becomes very handy if you need to extend one object with properties of others or when you need a deep copy of an object.
    :code(lang="js")
          var a = {
            apple: 0,
            cherry: 97
          };
          // Pass as empty object as target to copy a into b
          var b = app.utils.extend({}, a);

          console.log(b); // { apple: 0, cherry: 97 }
          console.log(a === b); // false
    :code(lang="js")
          var a = {
            apple: 0,
            cherry: 97
          };
          var b = {
            banana: 10,
            pineapple: 20,
          }

          // Extends a with b
          app.utils.extend(a, b);

          console.log(a); // { apple: 0, cherry: 97, banana: 10, pineapple: 20 }
    :code(lang="js")
          var a = {
            apple: 0,
            cherry: 97
          };
          var b = {
            banana: 10,
            pineapple: 20,
          }

          // Create new object c from the merge of a and b
          var c = app.utils.extend({}, a, b);

          console.log(c); // { apple: 0, cherry: 97, banana: 10, pineapple: 20 }
    :code(lang="js")
          var a = {
            apple: 0,
            cherry: 97
          };
          var b = {
            apple: 10,
            pineapple: 20,
          }

          // Extend a with b
          app.utils.extend(a, b);

          console.log(a); // { apple: 10, cherry: 97, pineapple: 20 }

    h3 `uniqueNumber()`
    .method-wrap
      p
        span.method app.utils.uniqueNumber()
        span - returns unique number, increased by 1 with every call
    :code(lang="js")
      app.utils.uniqueNumber(); // -> 2

      app.utils.uniqueNumber(); // -> 3

      app.utils.uniqueNumber(); // -> 4

    h3 `id()`
    .method-wrap
      p
        span.method app.utils.id(<span>mask</span>, <span>map</span>)
        span - generates random ID-like string
      ul.method-parameters
        li
          span.parameter mask
          |  - <span class="parameter-type">string</span> - ID string mask, by default is `xxxxxxxxxx`
        li
          span.parameter map
          |  - <span class="parameter-type">string</span> - characters that will be used for generation, by default is `0123456789abcdef`
      p.method-returns returns randomly generated string
    :code(lang="js")
      app.utils.id() // -> ffe28ab56e

      app.utils.id('xxxx-xxxx-xxxx-xxxx') // -> 1ea3-f127-dc67-627d

      app.utils.id('xxxx-xxxx', 'abcd') // -> aabc-ccda

    h3 `preloaderContent`
    p There are properties that contain theme-related (iOS, MD) content of <a href="preloader.html#preloader-layout">Preloader</a> element. Theses properties can be useful if you create preloaders dynamically.
    .method-wrap
      p
        span.method app.utils.iosPreloaderContent
        span - contains required preloader inner content (HTML string) for iOS theme
    .method-wrap
      p
        span.method app.utils.mdPreloaderContent
        span - contains required preloader inner content (HTML string) for MD theme

    :code(lang="js")
      // call method dynamically based on current app theme
      var preloaderContent = app.utils[app.theme + 'PreloaderContent'];

      // create required preloader content
      var myPreloader = '<div class="preloader">' + preloaderContent + '</div>';

      // add it somewhere
      $('.something').append(myPreloader);


    h3 `colorHexToRgb()`
    .method-wrap
      p
        span.method app.utils.colorHexToRgb(<span>hexColor</span>)
        span - converts HEX color to RGB color
      ul.method-parameters
        li
          span.parameter hexColor
          |  - <span class="parameter-type">string</span> - HEX color string
      p.method-returns returns `[R, G, B]` array
    :code(lang="js")
      app.utils.colorHexToRgb('#f00') // -> [255, 0, 0]

    h3 `colorRgbToHex()`
    .method-wrap
      p
        span.method app.utils.colorRgbToHex(<span>R</span>, <span>G</span>, <span>B</span>)
        span - converts RGB color to HEX color
      ul.method-parameters
        li
          span.parameter R
          |  - <span class="parameter-type">number</span> - red value (0 - 255)
        li
          span.parameter G
          |  - <span class="parameter-type">number</span> - green value (0 - 255)
        li
          span.parameter B
          |  - <span class="parameter-type">number</span> - blue value (0 - 255)
      p.method-returns returns HEX color string
    :code(lang="js")
      app.utils.colorHexToRgb(255, 0, 0) // -> '#ff0000'

    h3 `colorRgbToHsl()`
    .method-wrap
      p
        span.method app.utils.colorRgbToHsl(<span>R</span>, <span>G</span>, <span>B</span>)
        span - converts RGB color to HSL color
      ul.method-parameters
        li
          span.parameter R
          |  - <span class="parameter-type">number</span> - red value (0 - 255)
        li
          span.parameter G
          |  - <span class="parameter-type">number</span> - green value (0 - 255)
        li
          span.parameter B
          |  - <span class="parameter-type">number</span> - blue value (0 - 255)
      p.method-returns returns `[H, S, L]` array
    :code(lang="js")
      app.utils.colorRgbToHsl(255, 0, 0) // -> [0, 1, 0.5]

    h3 `colorHslToRgb()`
    .method-wrap
      p
        span.method app.utils.colorHslToRgb(<span>H</span>, <span>S</span>, <span>L</span>)
        span - converts HSL color to RGB color
      ul.method-parameters
        li
          span.parameter H
          |  - <span class="parameter-type">number</span> - hue value (0 - 360)
        li
          span.parameter S
          |  - <span class="parameter-type">number</span> - saturation value (0 - 1)
        li
          span.parameter L
          |  - <span class="parameter-type">number</span> - lightness value (0 - 1)
      p.method-returns returns `[R, G, B]` array
    :code(lang="js")
      app.utils.colorHslToRgb(0, 1, 0.5) // -> [255, 0, 0]

    h3 `colorHsbToHsl()`
    .method-wrap
      p
        span.method app.utils.colorHsbToHsl(<span>H</span>, <span>S</span>, <span>B</span>)
        span - converts HSB(V) color to HSL color
      ul.method-parameters
        li
          span.parameter H
          |  - <span class="parameter-type">number</span> - hue value (0 - 360)
        li
          span.parameter S
          |  - <span class="parameter-type">number</span> - saturation value (0 - 1)
        li
          span.parameter B
          |  - <span class="parameter-type">number</span> - brightness value (0 - 1)
      p.method-returns returns `[H, S, L]` array
    :code(lang="js")
      app.utils.colorHsbToHsl(360, 0.5, 0.5) // -> [360, 0.33, 0.375]

    h3 `colorHslToHsb()`
    .method-wrap
      p
        span.method app.utils.colorHslToHsb(<span>H</span>, <span>S</span>, <span>L</span>)
        span - converts HSL color to HSB(V) color
      ul.method-parameters
        li
          span.parameter H
          |  - <span class="parameter-type">number</span> - hue value (0 - 360)
        li
          span.parameter S
          |  - <span class="parameter-type">number</span> - saturation value (0 - 1)
        li
          span.parameter L
          |  - <span class="parameter-type">number</span> - lightness value (0 - 1)
      p.method-returns returns `[H, S, B]` array
    :code(lang="js")
      app.utils.colorHslToHsb(360, 0.5, 0.5) // -> [360, 0.66, 0.75]

    h3 `colorThemeCSSProperties()`
    .method-wrap
      p
        span.method app.utils.colorThemeCSSProperties(<span>hexColor</span>)
        span - returns object with generate CSS variables required to set specified theme color
      ul.method-parameters
        li
          span.parameter hexColor
          |  - <span class="parameter-type">string</span> - HEX color string
      p.method-returns returns object with required CSS variables and their values.

    .method-wrap
      p
        span.method app.utils.colorThemeCSSProperties(<span>R</span>, <span>G</span>, <span>B</span>)
        span - returns object with generate CSS variables required to set specified theme color
      ul.method-parameters
        li
          span.parameter R
          |  - <span class="parameter-type">number</span> - red value
        li
          span.parameter G
          |  - <span class="parameter-type">number</span> - green value
        li
          span.parameter B
          |  - <span class="parameter-type">number</span> - blue value
      p.method-returns returns object with required CSS variables and their values.

    :code(lang="js")
      app.utils.colorThemeCSSProperties('#f00')
      /* returns the following object:
      {
        "ios": {
          "--f7-theme-color": "var(--f7-ios-primary)",
          "--f7-theme-color-rgb": "var(--f7-ios-primary-rgb)",
          "--f7-theme-color-shade": "var(--f7-ios-primary-shade)",
          "--f7-theme-color-tint": "var(--f7-ios-primary-tint)"
        },
        "md": {
          "--f7-theme-color": "var(--f7-md-primary)",
          "--f7-theme-color-rgb": "var(--f7-md-primary-rgb)",
          "--f7-theme-color-shade": "var(--f7-md-primary-shade)",
          "--f7-theme-color-tint": "var(--f7-md-primary-tint)"
        },
        "light": {
          "--f7-ios-primary": "#f00",
          "--f7-ios-primary-shade": "#d60000",
          "--f7-ios-primary-tint": "#ff2929",
          "--f7-ios-primary-rgb": "255, 0, 0",
          "--f7-md-primary-shade": "#970100",
          "--f7-md-primary-tint": "#e90100",
          "--f7-md-primary-rgb": "192, 1, 0",
          "--f7-md-primary": "#c00100",
          "--f7-md-on-primary": "#ffffff",
          "--f7-md-primary-container": "#ffdad4",
          "--f7-md-on-primary-container": "#410000",
          "--f7-md-secondary": "#775651",
          "--f7-md-on-secondary": "#ffffff",
          "--f7-md-secondary-container": "#ffdad4",
          "--f7-md-on-secondary-container": "#2c1512",
          "--f7-md-surface": "#fffbff",
          "--f7-md-on-surface": "#201a19",
          "--f7-md-surface-variant": "#f5ddda",
          "--f7-md-on-surface-variant": "#534341",
          "--f7-md-outline": "#857370",
          "--f7-md-outline-variant": "#d8c2be",
          "--f7-md-inverse-surface": "#362f2e",
          "--f7-md-inverse-on-surface": "#fbeeec",
          "--f7-md-inverse-primary": "#ffb4a8",
          "--f7-md-surface-1": "#fceff2",
          "--f7-md-surface-2": "#fae7eb",
          "--f7-md-surface-3": "#f8e0e3",
          "--f7-md-surface-4": "#f7dde0",
          "--f7-md-surface-5": "#f6d8db",
          "--f7-md-surface-variant-rgb": [245, 221, 218],
          "--f7-md-on-surface-variant-rgb": [83, 67, 65],
          "--f7-md-surface-1-rgb": [252, 239, 242],
          "--f7-md-surface-2-rgb": [250, 231, 235],
          "--f7-md-surface-3-rgb": [248, 224, 227],
          "--f7-md-surface-4-rgb": [247, 221, 224],
          "--f7-md-surface-5-rgb": [246, 216, 219]
        },
        "dark": {
          "--f7-md-primary-shade": "#ff917f",
          "--f7-md-primary-tint": "#ffd7d1",
          "--f7-md-primary-rgb": "255, 180, 168",
          "--f7-md-primary": "#ffb4a8",
          "--f7-md-on-primary": "#690100",
          "--f7-md-primary-container": "#930100",
          "--f7-md-on-primary-container": "#ffdad4",
          "--f7-md-secondary": "#e7bdb6",
          "--f7-md-on-secondary": "#442925",
          "--f7-md-secondary-container": "#5d3f3b",
          "--f7-md-on-secondary-container": "#ffdad4",
          "--f7-md-surface": "#201a19",
          "--f7-md-on-surface": "#ede0dd",
          "--f7-md-surface-variant": "#534341",
          "--f7-md-on-surface-variant": "#d8c2be",
          "--f7-md-outline": "#a08c89",
          "--f7-md-outline-variant": "#534341",
          "--f7-md-inverse-surface": "#ede0dd",
          "--f7-md-inverse-on-surface": "#362f2e",
          "--f7-md-inverse-primary": "#c00100",
          "--f7-md-surface-1": "#2b2220",
          "--f7-md-surface-2": "#322624",
          "--f7-md-surface-3": "#392b29",
          "--f7-md-surface-4": "#3b2c2a",
          "--f7-md-surface-5": "#3f302d",
          "--f7-md-surface-variant-rgb": [83, 67, 65],
          "--f7-md-on-surface-variant-rgb": [216, 194, 190],
          "--f7-md-surface-1-rgb": [43, 34, 32],
          "--f7-md-surface-2-rgb": [50, 38, 36],
          "--f7-md-surface-3-rgb": [57, 43, 41],
          "--f7-md-surface-4-rgb": [59, 44, 42],
          "--f7-md-surface-5-rgb": [63, 48, 45]
        }
      }
      */

